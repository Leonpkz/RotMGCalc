# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AnimatedSpriteSheet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AnimatedSpriteSheet()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAnimatedSpriteSheet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AnimatedSpriteSheet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AnimatedSpriteSheet
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AnimatedSpriteSheet
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AnimatedSpriteSheet
    def Set(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AnimatedSpriteSheet
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AnimatedSpriteSheet
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AnimatedSpriteSheet
    def Sprite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Sprite import Sprite
            obj = Sprite()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AnimatedSpriteSheetStart(builder):
    builder.StartObject(6)

def Start(builder):
    AnimatedSpriteSheetStart(builder)

def AnimatedSpriteSheetAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    AnimatedSpriteSheetAddName(builder, name)

def AnimatedSpriteSheetAddIndex(builder, index):
    builder.PrependUint32Slot(1, index, 0)

def AddIndex(builder, index):
    AnimatedSpriteSheetAddIndex(builder, index)

def AnimatedSpriteSheetAddSet(builder, set):
    builder.PrependInt32Slot(2, set, 0)

def AddSet(builder, set):
    AnimatedSpriteSheetAddSet(builder, set)

def AnimatedSpriteSheetAddDirection(builder, direction):
    builder.PrependUint32Slot(3, direction, 0)

def AddDirection(builder, direction):
    AnimatedSpriteSheetAddDirection(builder, direction)

def AnimatedSpriteSheetAddAction(builder, action):
    builder.PrependUint32Slot(4, action, 0)

def AddAction(builder, action):
    AnimatedSpriteSheetAddAction(builder, action)

def AnimatedSpriteSheetAddSprite(builder, sprite):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sprite), 0)

def AddSprite(builder, sprite):
    AnimatedSpriteSheetAddSprite(builder, sprite)

def AnimatedSpriteSheetEnd(builder):
    return builder.EndObject()

def End(builder):
    return AnimatedSpriteSheetEnd(builder)
