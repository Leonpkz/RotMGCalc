# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Sprite(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sprite()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSprite(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Sprite
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Sprite
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from Position import Position
            obj = Position()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Sprite
    def MaskPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from Position import Position
            obj = Position()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Sprite
    def Padding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Sprite
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Sprite
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Sprite
    def IsTransparent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Sprite
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sprite
    def AtlasId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def SpriteStart(builder):
    builder.StartObject(8)

def Start(builder):
    SpriteStart(builder)

def SpriteAddPosition(builder, position):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    SpriteAddPosition(builder, position)

def SpriteAddMaskPosition(builder, maskPosition):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(maskPosition), 0)

def AddMaskPosition(builder, maskPosition):
    SpriteAddMaskPosition(builder, maskPosition)

def SpriteAddPadding(builder, padding):
    builder.PrependInt32Slot(2, padding, 0)

def AddPadding(builder, padding):
    SpriteAddPadding(builder, padding)

def SpriteAddIndex(builder, index):
    builder.PrependInt32Slot(3, index, 0)

def AddIndex(builder, index):
    SpriteAddIndex(builder, index)

def SpriteAddColor(builder, color):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    SpriteAddColor(builder, color)

def SpriteAddIsTransparent(builder, isTransparent):
    builder.PrependBoolSlot(5, isTransparent, 0)

def AddIsTransparent(builder, isTransparent):
    SpriteAddIsTransparent(builder, isTransparent)

def SpriteAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SpriteAddName(builder, name)

def SpriteAddAtlasId(builder, atlasId):
    builder.PrependUint64Slot(7, atlasId, 0)

def AddAtlasId(builder, atlasId):
    SpriteAddAtlasId(builder, atlasId)

def SpriteEnd(builder):
    return builder.EndObject()

def End(builder):
    return SpriteEnd(builder)
