# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SpriteSheetRoot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpriteSheetRoot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpriteSheetRoot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SpriteSheetRoot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpriteSheetRoot
    def Sprites(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from SpriteSheet import SpriteSheet
            obj = SpriteSheet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SpriteSheetRoot
    def SpritesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SpriteSheetRoot
    def SpritesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # SpriteSheetRoot
    def AnimatedSprites(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from RotMGCalc.project.utils.flatbufferutils.AnimatedSpriteSheet import AnimatedSpriteSheet
            obj = AnimatedSpriteSheet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SpriteSheetRoot
    def AnimatedSpritesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SpriteSheetRoot
    def AnimatedSpritesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SpriteSheetRootStart(builder):
    builder.StartObject(2)

def Start(builder):
    SpriteSheetRootStart(builder)

def SpriteSheetRootAddSprites(builder, sprites):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sprites), 0)

def AddSprites(builder, sprites):
    SpriteSheetRootAddSprites(builder, sprites)

def SpriteSheetRootStartSpritesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSpritesVector(builder, numElems):
    return SpriteSheetRootStartSpritesVector(builder, numElems)

def SpriteSheetRootAddAnimatedSprites(builder, animatedSprites):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(animatedSprites), 0)

def AddAnimatedSprites(builder, animatedSprites):
    SpriteSheetRootAddAnimatedSprites(builder, animatedSprites)

def SpriteSheetRootStartAnimatedSpritesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAnimatedSpritesVector(builder, numElems):
    return SpriteSheetRootStartAnimatedSpritesVector(builder, numElems)

def SpriteSheetRootEnd(builder):
    return builder.EndObject()

def End(builder):
    return SpriteSheetRootEnd(builder)
